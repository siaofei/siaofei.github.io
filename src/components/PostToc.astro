---
/**
 * Table of Contents (TOC) Component
 *
 * This component generates a collapsible table of contents (TOC) for a post,
 * displaying only the headings with a depth of 2 (h2) and 3 (h3). It supports
 * dynamic visibility control and is interactive with the page's content using
 * an `IntersectionObserver`.
 *
 * @param {MarkdownHeading[]} tocs - Array of headings to display in the TOC.
 * @param {boolean} [inPost=false] - If true, the TOC is styled for in-post display,
 * hiding on large screens.
 * @param {number} [minNumHeadingsToShowToc=4] - Minimum number of headings required to
 * display the TOC.
 * @param {boolean} defaultOpenToc - If true, the TOC is expanded by default.
 * @param {string} labelTocTitle - The title label for the TOC section.
 * @param {string} [labelTocClass] - Optional CSS classes for the TOC title label.
 */

import type { MarkdownHeading } from 'astro'

import { Icon } from 'astro-icon/components'

interface Props {
  tocs: MarkdownHeading[]
  inPost?: boolean
  minNumHeadingsToShowToc?: number
  defaultOpenToc: boolean
  labelTocTitle: string
  labelTocClass?: string
}

const { tocs, inPost, minNumHeadingsToShowToc, defaultOpenToc, labelTocTitle, labelTocClass } =
  Astro.props

const showToc = tocs.length >= (minNumHeadingsToShowToc || 4)
---

{
  showToc && (
    <nav
      class:list={[
        'm2it-box-shadow flex h-fit w-full flex-col gap-2 rounded-xl bg-slate-50 px-2 py-3',
        {
          '2xl:hidden': inPost, // hide on large screens
          'max-h-full p-3': !inPost,
          'border-[0.5px]': !inPost,
          'mb-10 max-h-[350px]': inPost,
          border: inPost,
        },
      ]}
      aria-label="Table of contents"
      x-data={`{ showContent: ${defaultOpenToc} }`}
    >
      <button
        class:list={['flex items-center justify-between px-2 pb-0 font-semibold text-slate-700']}
        x-on:click="showContent = ! showContent"
      >
        <div class:list={[labelTocClass, 'text-[0.95rem]']}>{labelTocTitle ?? 'In this note'}</div>
        <div>
          <Icon
            name="IoIosArrowDown"
            class="text-xl transition-all duration-[400ms] ease-in-out"
            x-bind:class="showContent ? 'rotate-0' : 'rotate-[-90deg]'"
          />
        </div>
      </button>

      <div
        class:list={[
          'not-prose m2it-scrollbar m2it-scrollbar-small overflow-auto border-t pl-1 pt-3',
          {
            'columns-1 md:columns-2': inPost,
          },
        ]}
        x-show="showContent"
      >
        {tocs
          .filter((toc) => toc.depth === 2 || toc.depth === 3)
          .map((heading) => (
            <a
              id={`toc-${heading.slug}`}
              href={`#${heading.slug}`}
              class:list={[
                'hover:m2it-link flex break-inside-avoid items-baseline gap-2 px-2 py-1 text-[0.88em]',
                {
                  'ml-2 border-l pl-2': heading.depth === 3, // H3
                  '-ml-1': heading.depth === 2, // H2
                },
              ]}
            >
              {heading.depth === 2 && <span class="text-[0.7em] text-slate-400">◆</span>}
              {heading.depth === 3 && <span class="text-[0.6em] text-slate-400">○</span>}

              <span class="block">{heading.text}</span>
            </a>
          ))}
      </div>
    </nav>
  )
}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const observerOptions = {
      rootMargin: '-100px 0% -80% 0px',
    }

    let activeId = ''
    const handleObserver = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        // corresponding toc item
        const tocItem = document.querySelector(`#toc-${entry.target.id}`)

        if (entry?.isIntersecting) {
          if (activeId && entry.target.id !== activeId) {
            // remove previous tocItem effect
            document
              .querySelector(`#toc-${activeId}`)
              ?.classList.remove('bg-slate-200', 'text-slate-900')
          }
          tocItem?.classList.replace('text-slate-600', 'text-slate-900')
          tocItem?.classList.add('bg-slate-200')
          activeId = entry.target.id
        } else if (entry.target.id === activeId) {
          tocItem?.classList.remove('bg-slate-200')
          tocItem?.classList.add('text-slate-600')
        }
      })
    }

    const observer = new IntersectionObserver(handleObserver, observerOptions)
    document.querySelectorAll('h2, h3').forEach((elem) => observer.observe(elem))
  })
</script>
